name: Manual contribution creator

on:
  workflow_dispatch:
    inputs:
      parent_repo:
        description: 'Parent repository (owner/repo)'
        required: true
        default: 'huynhhain/aurora-switch'
        type: string
      commit_type:
        description: 'Commit type'
        required: true
        default: 'docs'
        type: choice
        options:
          - docs
          - refactor
          - style
          - perf
          - chore
          - fix
          - feat
      target_file:
        description: 'File to modify'
        required: true
        default: 'Main.kt'
        type: string
      custom_message:
        description: 'Custom message (optional)'
        required: false
        type: string

jobs:
  create-pr:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout fork
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
      
      - name: Configure Git
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
      
      - name: Display target info
        run: |
          echo "Target repository: ${{ inputs.parent_repo }}"
          echo "Commit type: ${{ inputs.commit_type }}"
          echo "File: ${{ inputs.target_file }}"
      
      - name: Create new branch
        id: branch
        run: |
          TIMESTAMP=$(date +%s)
          BRANCH_NAME="auto/${{ inputs.commit_type }}-${TIMESTAMP}"
          echo "branch_name=${BRANCH_NAME}" >> $GITHUB_OUTPUT
          git checkout -b ${BRANCH_NAME}
          echo "Branch created: ${BRANCH_NAME}"
      
      - name: Check if file exists and create if needed
        run: |
          TARGET_FILE="${{ inputs.target_file }}"
          
          if [ ! -f "$TARGET_FILE" ]; then
            echo "File does not exist, creating..."
            mkdir -p "$(dirname "$TARGET_FILE")"
            echo "// Auto-generated file" > "$TARGET_FILE"
            echo "File created: $TARGET_FILE"
          else
            echo "File exists: $TARGET_FILE"
          fi
      
      - name: Generate changes
        run: |
          TARGET_FILE="${{ inputs.target_file }}"
          COMMIT_MSG="${{ inputs.custom_message }}"
          
          UNIQUE_ID=$(date +%s%N | md5sum | head -c 8)
          
          if [ -z "$COMMIT_MSG" ]; then
            case "${{ inputs.commit_type }}" in
              "docs")
                COMMIT_MSG="Update documentation"
                ;;
              "refactor")
                COMMIT_MSG="Refactor code structure"
                ;;
              "style")
                COMMIT_MSG="Improve code formatting"
                ;;
              "perf")
                COMMIT_MSG="Performance improvements"
                ;;
              "chore")
                COMMIT_MSG="Update build configuration"
                ;;
              "fix")
                COMMIT_MSG="Bug fixes"
                ;;
              "feat")
                COMMIT_MSG="Add new features"
                ;;
            esac
          fi
          
          echo "" >> "$TARGET_FILE"
          echo "// ${{ inputs.commit_type }}: ${COMMIT_MSG} [${UNIQUE_ID}]" >> "$TARGET_FILE"
          echo "// Updated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> "$TARGET_FILE"
          
          echo "COMMIT_MSG=${COMMIT_MSG}" >> $GITHUB_ENV
          echo "Changes applied to: $TARGET_FILE"
      
      - name: Verify changes exist
        run: |
          if git diff --quiet; then
            echo "No changes detected"
            exit 1
          else
            echo "Changes detected"
            git diff --stat
          fi
      
      - name: Commit changes
        run: |
          git add .
          git commit -m "${{ inputs.commit_type }}: ${COMMIT_MSG}"
          echo "Commit created"
      
      - name: Push to fork
        run: |
          git push origin ${{ steps.branch.outputs.branch_name }}
          echo "Changes pushed to fork"
      
      - name: Create Pull Request to parent
        id: create_pr
        run: |
          cat > /tmp/pr_body.txt <<'PRBODY'
          ## Type of change
          - [x] ${{ inputs.commit_type }}
          
          ## Description
          ${COMMIT_MSG}
          
          ## Details
          - File: ${{ inputs.target_file }}
          - Author: @${{ github.actor }}
          - Date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          - Fork: ${{ github.repository }}
          
          ---
          *Created automatically via GitHub Actions*
          PRBODY
          
          PR_URL=$(gh pr create \
            --repo "${{ inputs.parent_repo }}" \
            --base main \
            --head "${{ github.repository_owner }}:${{ steps.branch.outputs.branch_name }}" \
            --title "${{ inputs.commit_type }}: ${COMMIT_MSG}" \
            --body-file /tmp/pr_body.txt)
          
          echo "pr_url=${PR_URL}" >> $GITHUB_OUTPUT
          echo "Pull Request created: ${PR_URL}"
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
      
      - name: Success Summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY <<'SUMMARY'
          # Pull Request successfully created!
          
          ## Details
          SUMMARY
          
          echo "- **PR URL:** ${{ steps.create_pr.outputs.pr_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Type:** ${{ inputs.commit_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Message:** ${COMMIT_MSG}" >> $GITHUB_STEP_SUMMARY
          echo "- **Target repository:** ${{ inputs.parent_repo }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ steps.branch.outputs.branch_name }}" >> $GITHUB_STEP_SUMMARY
